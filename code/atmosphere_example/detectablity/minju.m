function [J,PSI,x]=minju(u,name,x0,tsar,u_constr,neq,ctol,varargin)
% MINJU   : Function to be minimized by constr.m to solve
%           a Digital OPTimal control with Fixed TF
%           and bounded control
%
%           [J_optim,G,x]=minju(u,name,x0,tsar,tol,u_constr)
%
% Notes : - Each iteration the cost J and the average control change dua are displayed.
%         - Every iteration the best control is saved in utemp.mat.
%         - To interrupt the routine edit the number in the breakdop.txt file,
%           generated by this function, into non-zero. Using ctrl-break or ctrl-c
%           results in problems.
%
%         Input
%         u         : (m x ni) vector of initial controls
%         name	    : name of the model-file (m-file)
%         x0        : (n x 1) state at time t=0
%         tsar      : array with sampling instants and final time
%         u_constr  : Control constraints
%         varargin  : structure collecting passed parameters
%
%         Output
%         J_optim   : optimal costs
%         PSI       : terminal constraints (required for constr.m)
%         x         : state trajectory at sampling instants
%
%         See also : lineglob.m, lineeval.m
%
%         GvW/CH Last modified : 4-6-2001

global J_glob tol_glob f_step;

%if rem(count_gl,10)==1
  if fileflag('breakdop.txt'); error('delibarate error due to fileflag(''breakdop.txt'')'); end
%end

% Check inputs
if nargin<4; error(' At least 4 input arguments required'); end
[m,N]=size(u); N1=N+1; [n,mh]=size(x0); if mh~=1; error('1st input must be a column vector'); end;
if ~isstr(name); error('2nd argument must be a string'); end
if length(tsar)~=N1; error('size control and sampling instants array do not match'); end;
[mh,nh]=size(x0); if nh~=1; error('3rd input must be a column vector'); end;
if nargin==5
  [mb,nh]=size(u_constr);
  if mb~=0;
    if mb~=m || nh~=2; error('5th input is not m x 2'); end;
    if any(u_constr(:,2)-u_constr(:,1))<0; error(' Lower control bound exceeds upper control bound'); end;
  end
else
  mb=0;
end

% definition of the bounds
umin=u_constr(:,1); umax=u_constr(:,2);
ns=length(x0); [nc,N]=size(u); N1=N+1; dum=zeros(nc,1);

[PSIT,dPSIT]=feval(name,dum,x0,tsar(1),1,7,varargin{:});
[nt,mt]=size(PSIT); PSITT=zeros(nt*N,1); ind1=1; ind2=nt;
x=zeros(ns,N1); la=zeros(ns,1); x(:,1)=x0; PSIT=zeros(nt*N,1);
% Forward sequencing and store x(:,i):
for i=1:N,  
  x(:,i+1)=feval(name,u(:,i),x(:,i),tsar(i),tsar(i+1)-tsar(i),1,varargin{:});
  PSIT(ind1:ind2,1)=feval(name,dum,x(:,i+1),tsar(i+1),1,7,varargin{:});
  ind1=ind1+nt; ind2=ind2+nt;
end
% Perf. index, term. constraints, && B.C.s for bkwd sequences:
[PHIPSI]=feval(name,dum,x(:,N1),tsar(N1),1,2,varargin{:});
J=PHIPSI(1,1); PSI=[PHIPSI(2:end,1); PSIT];
tol=max([abs(PSI(1:neq)); PSI(neq+1:end); -999]);

if tol<tol_glob && tol>ctol
  tol_glob=tol; sflag=1;
elseif tol<=ctol && J<=J_glob
  J_glob=J; tol_glob=ctol; sflag=1;
else
  sflag=0;
end

if sflag==1;
% Adapt to output format 
  tu=[tsar' [u';zeros(1,size(u,1))]]; tx=[tsar' x'];
  J_glob=J; J_optim=J; varin=varargin;
  save utemp J_optim tu u tx x0 u_constr f_step varin;
end;